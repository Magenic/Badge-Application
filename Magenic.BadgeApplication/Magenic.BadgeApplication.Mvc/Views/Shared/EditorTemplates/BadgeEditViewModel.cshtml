@using Magenic.BadgeApplication.BusinessLogic.Badge
@using Magenic.BadgeApplication.Common.Enums
@using Magenic.BadgeApplication.Resources
@using Magenic.BadgeApplication.Models
@using Csla.Web.Mvc
@using Csla.Rules
@using Csla
@model BadgeEditViewModel

<div class="row">
    <div class="col-md-12">
        @ApplicationResources.BadgeEditDescription
    </div>
</div>
<div class="row">
    &nbsp;
</div>

@Html.HiddenFor(bevm => bevm.Badge.Id)
<div class="row">
    <div class="col-md-5">
        <div class="editor-label">
            @Html.LabelFor(bevm => bevm.Badge.Name, ApplicationResources.BadgeNameLabel)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(bevm => bevm.Badge.Name, new { @class = "form-control" })
            @Html.ValidationMessageFor(bevm => bevm.Badge.Name)
        </div>

        <div class="editor-label">
            @Html.LabelFor(bevm => bevm.Badge.Tagline, ApplicationResources.BadgeTaglineLabel)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(bevm => bevm.Badge.Tagline, new { @class = "form-control" })
            @Html.ValidationMessageFor(bevm => bevm.Badge.Tagline)
        </div>

        <div class="editor-label">
            @Html.LabelFor(bevm => bevm.Badge.Description, ApplicationResources.BadgeDescriptionLabel)
        </div>
        <div class="editor-field">
            @Html.TextAreaFor(bevm => bevm.Badge.Description, new { @class = "form-control", rows = "6", cols = "10" })
            @Html.ValidationMessageFor(bevm => bevm.Badge.Description)
        </div>

        <label>@ApplicationResources.BadgeTypeLabel</label><br />
        <label>
            @* Have to do this manually because business rule only handles property, not the UI Elements. *@
            @if (ApplicationContext.User.IsInRole(PermissionType.Administrator.ToString()))
            {
                <text>
                    @Html.RadioButtonFor(bevm => bevm.Badge.Type, BadgeType.Corporate)
                </text>
            }
            else
            {
                <text>
                    @Html.RadioButton("NotBoundType", BadgeType.Corporate, Model.Badge.Type == BadgeType.Corporate, new { disabled = "disabled" })
                </text>
            }
            @ApplicationResources.BadgeCorporateLabel
        </label>
        <br /><br />
        <div class="editor-label">
            @Html.Label(ApplicationResources.RequiredActivitiesLabel)
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(bevm => bevm.SelectedActivityId, Model.AllActivities, new { @class = "form-control selectpicker show-tick" })
        </div>
    </div>

    <div class="col-md-5">
        <div class="editor-label">
            @Html.LabelFor(bevm => bevm.Badge.ImagePath, ApplicationResources.BadgeImageLabel)
        </div>
        <div class="editor-field">
            <input name="badgeImage" type="file" class="filestyle" onchange="setImagePath()" data-classbutton="btn btn-primary" data-classinput="form-control pull-left">
            @Html.HiddenFor(bevm => bevm.Badge.ImagePath)
            @Html.ValidationMessageFor(bevm => bevm.Badge.ImagePath)
        </div>
        <div class="editor-field">
            @Html.Partial(Mvc.Shared.Views._CorporateBadgeTemplate)
        </div>
        <div class="pull-left">
            <div class="editor-label">
                @Html.LabelFor(bevm => bevm.Badge.EffectiveStartDate, ApplicationResources.BadgeStartDateLabel)
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(bevm => bevm.Badge.EffectiveStartDate, new { @class = "form-control datepicker" })
                @Html.ValidationMessageFor(bevm => bevm.Badge.EffectiveStartDate)
            </div>
        </div>
        <div class="pull-left">
            <div class="editor-label">
                @Html.LabelFor(bevm => bevm.Badge.EffectiveEndDate, ApplicationResources.BadgeEndDateLabel)
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(bevm => bevm.Badge.EffectiveEndDate, new { @class = "form-control datepicker" })
                @Html.ValidationMessageFor(bevm => bevm.Badge.EffectiveEndDate)
            </div>
        </div>
        <div class="clearfix">&nbsp;</div>
        <label>
            @Html.CheckBoxFor(bevm => bevm.Badge.MultipleAwardsPossible)
            @ApplicationResources.BadgeMultipleAwardsLabel
        </label>
        <br /><br />
        <label>
            @Html.CheckBoxFor(bevm => bevm.Badge.DisplayOnce)
            @ApplicationResources.BadgeDisplayOnceLabel
        </label>
        <br /><br />
        <div class="editor-label">
            @Html.LabelFor(bevm => bevm.Badge.ActivityPointsAmount, ApplicationResources.ActivityPointsAmountLabel)
        </div>
        <div class="editor-field">
            @Html.HasPermission(AuthorizationActions.WriteProperty, Model.Badge, BadgeEdit.ActivityPointsAmountProperty, Html.TextBoxFor(bevm => bevm.Badge.ActivityPointsAmount, new { @class = "form-control" }), Html.TextBox("NotBoundActivityPointsAmount", Model.Badge.ActivityPointsAmount, new { @class = "form-control", disabled = "disabled" }))
            @Html.ValidationMessageFor(bevm => bevm.Badge.ActivityPointsAmount)
        </div>
        <div class="editor-label">
            @Html.LabelFor(bevm => bevm.Badge.AwardValueAmount, ApplicationResources.BadgePointsReceievedLabel)
        </div>
        <div class="editor-field">
            @Html.HasPermission(AuthorizationActions.WriteProperty, Model.Badge, BadgeEdit.AwardValueAmountProperty, Html.TextBoxFor(bevm => bevm.Badge.AwardValueAmount, new { @class = "form-control" }), @Html.TextBox("NotBoundAwardValueAmount", Model.Badge.AwardValueAmount, new { @class = "form-control", disabled = "disabled" }))
            @Html.ValidationMessageFor(bevm => bevm.Badge.AwardValueAmount)
        </div>
        <div class="editor-label">
            @Html.LabelFor(bevm => bevm.Badge.Priority, ApplicationResources.BadgePriorityLabel)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(bevm => bevm.Badge.Priority, new { @class = "form-control" })
            @Html.ValidationMessageFor(bevm => bevm.Badge.Priority)
        </div>
    </div>
</div>

<div class="row">
    &nbsp;
</div>

<div class="row">
    <div class="col-md-12">
        <input type="submit" name="submitButton" class="btn btn-success" value="@ApplicationResources.SubmitButton" />

        @if (Model.Badge.AllowDeletion && ApplicationContext.User.IsInRole(PermissionType.Administrator.ToString()))
        {
            <text>
                <button type="button" class="btn btn-danger" data-toggle="modal" data-target="#deleteConfirmationModal">
                    Delete
                </button>
            </text>
        }
    </div>
</div>

<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Confirm Deletion</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                The badge activity will no longer be associated with this badge after deletion.
                Do you wish to proceed?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" aria-label="Cancel">Cancel</button>
                <input id="btnDelete" type="submit" name="submitButton" class="btn btn-primary" value="Delete" aria-label="Delete" />
            </div>
        </div>
    </div>
</div>